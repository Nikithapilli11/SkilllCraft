import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

IMAGE_SIZE = (64, 64)
DATASET_DIR = r"C:\Users\nikit\Downloads\train"
MAX_IMAGES_PER_CLASS = 1000 

data = []
labels = []
count = {'cat': 0, 'dog': 0}

print("Loading and preprocessing images...")
for filename in os.listdir(DATASET_DIR):
    label = 'cat' if 'cat' in filename else 'dog'
    if count[label] >= MAX_IMAGES_PER_CLASS:
        continue
    img_path = os.path.join(DATASET_DIR, filename)
    try:
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, IMAGE_SIZE)
        data.append(img.flatten())  # Flatten image
        labels.append(label)
        count[label] += 1
    except:
        continue

print(f" Loaded {len(data)} images.")

# === Preview as DataFrame ===
df_preview = pd.DataFrame(data)
df_preview['label'] = labels

print("\nðŸ”¹ Head of dataset:")
print(df_preview.head())

print("\nðŸ”¹ Tail of dataset:")
print(df_preview.tail())


def show_images(images, labels, title):
    plt.figure(figsize=(10, 2))
    for i in range(len(images)):
        plt.subplot(1, len(images), i + 1)
        plt.imshow(images[i].reshape(64, 64), cmap='gray')
        plt.title(labels[i])
        plt.axis('off')
    plt.suptitle(title)
    plt.tight_layout()
    plt.show()

show_images(data[:3], labels[:3], "ðŸ”¹ Head Sample Images")
show_images(data[-3:], labels[-3:], "ðŸ”¹ Tail Sample Images")


X = np.array(data)
le = LabelEncoder()
y = le.fit_transform(labels)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


print("ðŸš€ Training SVM model...")
svm = SVC(kernel='linear', probability=True)
svm.fit(X_train, y_train)


y_pred = svm.predict(X_test)
print("\nðŸ§¾ Classification Report:\n", classification_report(y_test, y_pred))
]
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

plt.figure(figsize=(10, 4))
for i in range(8):
    img = X_test[i].reshape(64, 64)
    plt.subplot(2, 4, i + 1)
    plt.imshow(img, cmap='gray')
    plt.title(f"Pred: {le.inverse_transform([y_pred[i]])[0]}")
    plt.axis('off')
plt.suptitle("ðŸ“¸ Sample Predictions")
plt.tight_layout()
plt.show()
